#!/usr/bin/env python3
import os
import sys
import getopt
import subprocess
from time import sleep
import socket
import re
import signal
import datetime
from threading import Thread

VERSION = "0.1"
PROGRAM = os.path.basename(__file__)
USAGE = f"""\
{PROGRAM} version {VERSION}.
Display text or graphic to an attached LCD.
Syntax: {PROGRAM} [OPTION] [TEXT]
Common options:
-h           Display this help and exit.
-L host:port Listen on "host:port" for client connections (the daemon mode).
Device options:
-t           LCD type (required). See supported types below.
-i           Initialize/reset LCD (effectively clear the screen).
-x           Clear the screen.
-B           Turn backlight on.
-b           Turn backlight off.
-d opt       Run a demo name "opt" (default "all") and ignore all other options.
-g           Use graphic mode (if supported).
-z freq      Set LCD communication speed in Hz (if supported) or "-" to revert
             to default value (1953000, 1.95Mhz). A 39.9Mhz (39900000Hz)
             frequency was tested working well on a Raspberry Pi Zero W.
-w usec      Set delay in microsecond between writes to LCD (if supported) or
             "-" to revert to default value (72).
-p           Print LCD parameters.
-s           Show LCD server showStat at the last line.
-v n         Verbose/debug level. Debug messages will be sent to stderr.
Text options:
-f font      Use given font named "font" (if supported).
-l line      Set text line before printing (start from 1, default 1).
-c column    Set text column before printing (start from 1, default 1).
Supported LCD types:
- st7920: 128x64 graphic LCD, ST7920 chip, 10 lines 32 characters, 4x6 font.
- hd44780: 16x2 character LCD, HD44780 chip, 2 lines 16 characters, 5x8 font.
- hd44780opi: it is hd44780 written for Orange Pi boards.
Supported fonts:
- st7920: 4x6, 5x6, 6x8 (default).
"""

# Default settings.
debug = 0
pause = False
quit = False
lcd = None
backlight = None
showStat = False
port = None
blink = False

def heartbeat():
	"""Send nop or update clock every 1 second."""
	global port
	global showStat
	global quit
	while not quit:
		if showStat:
			t = datetime.datetime.now().strftime('%H:%M:%S>')
			cmd = f'text {lcd.lines} 1 nofill {t}'
		else:
			cmd = "nop"
		with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
			try:
				s.connect(('localhost', port))
				s.sendall(cmd.encode())
			except:
				pass
		sleep(1)

def blinkScreen(interval = 0.5):
	"""Run every 0.1s to do things like update clock at the status line."""
	global lcd
	global blink
	global quit
	state = False
	while blink and (not quit):
		lcd.setBacklight(state)
		# Flip the state.
		state = not state
		sleep(interval)

def sendQuit():
	"""Send quit command to itself via socket."""
	global port
	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
		s.connect(('localhost', port))
		s.sendall('quit'.encode())

def onSignal(*args):
	"""Handle signals to quit."""
	Thread(target = sendQuit, args = ()).start()

def debugLog(msg):
	global debug
	if debug:
		now = datetime.datetime.now()
		print(now.strftime('%Y-%m-%d %H:%M:%S'), msg, file = sys.stderr)

def lcdStat(msg):
	if showStat:
		msg = msg.ljust(lcd.columns - 9)
		lcd.printText(msg, line = lcd.lines, col = 10, fillChar = None)
		# Draw a bar above the status text if possible.
		try:
			if not lcd.textMode:	 
				y = (lcd.lines - 1)*lcd.fontHeight + lcd.marginTop - 2
				for x in range(lcd.marginLeft, lcd.width - lcd.marginRight):
					lcd.plot(x, y, redraw = False)
					lcd.plot(x, y + lcd.fontHeight + 2, redraw = False)
				lcd.redraw()
		except NotImplementedError:
			pass

def handleMsg(msg):
	"""Handle client's message and return a feedback. A message can contains
	multiple commands, separated by double semi-colons ';;'."""
	global debug
	global pause
	global quit
	global lcd
	global backlight
	global blink
	# Default feedback. It will be updated to the last command.
	feedback = "OK."
	cmds = msg.split(';;')
	for cmd in cmds:
		cmd = cmd.strip()
		if not len(cmd):
			continue
		debugLog(f"Command = \"{cmd}\".")
		try:
			op, args = cmd.split(' ', 1)
			debugLog(f"Op = \"{op}\", args = \"{args}\".")
		except ValueError:
			op = cmd
			args = ""
			debugLog(f"Op = \"{op}\", no args.")
		# Handle the extracted command.
		if op == "nop":
			# No operation command. Simply do nothing.
			pass
		elif op == "quit":
			# Terminate.
			debugLog("Terminate.")
			quit = True
			break
		elif op == "debug":
			try:
				debug = int(args)
				debugLog(f"Set debug level {debug}")
				lcd.setDebug(debug)
			except ValueError:
				debugLog("Invalid debug level.")
				feedback = "Invalid debug level."
		elif op == "pause":
			if args == "on":
				debugLog("Pause on.")
				pause = True
			elif args == "off":
				debugLog("Pause off.")
				pause = False
			else:
				debugLog("Invalid command argument.")
				feedback = "Invalid command argument."
		elif pause:
			feedback = "On pause."
		elif op == "clear":
			debugLog("Clear screen.")
			lcd.clearScreen()
		elif op == "backlight":
			if args == "on":
				debugLog("Turn backlight on.")
				backlight = True
			elif args == "off":
				debugLog("Turn backlight off.")
				backlight = False
			lcd.setBacklight(backlight)
		elif op == "blink":
			if args == "off":
				debugLog("Turn blinking off.")
				blink = False
				# Restore backlight state.
				lcd.setBacklight(backlight)
			elif not blink:
				try:
					interval = float(args)
					blink = True
					# Create a thread to do the blinking.
					Thread(target = blinkScreen, args = (interval,)).start()
				except ValueError:
					debugLog("Invalid blink interval.")
					feedback = "Invalid blink interval."
			else:
				debugLog("Already blinking. Command ignored.")
				feedback = "Already blinking. Stop blinking first."
		elif op == "freq":
			if args == "-":
				debugLog("Set frequency to LCD's default.")
				lcd.setFreq(None)
			else:
				debugLog("Set frequency to %sHz" % int(args))
				lcd.setFreq(int(args))
		elif op == "delay":
			if args == "-":
				debugLog("Set write delay to LCD's default.")
				lcd.setWriteDelay(None)
			else:
				debugLog("Set write delay to %s usec" % int(args))
				lcd.setWriteDelay(int(args))
		elif op == "font":
			if args == "?":
				feedback = "Fonts list: %s.\n" % ", ".join(lcd.getGfxFontNames())
			else:
				if lcd.setGfxFont(args):
					debugLog(f"Font was set to {args}")
				else:
					debugLog(f"Failed to set font to {args}")
					feedback = "ERROR: invalid font %s. Supported fonts: %s.\n" % (
							args, ", ".join(lcd.getGfxFontNames()))
		elif op == "text":
			# Syntax: text line column fill|nofill content
			l = args.split(' ')
			if len(l) < 4:
				debugLog("Invalid syntax")
				feedback = "ERROR: invalid syntax."
			else:
				s = ' '.join(l[3:])
				debugLog(f'Printing "{s}" at line {l[0]}, column {l[1]}, {l[2]}.')
				lcd.printText(s, line = int(l[0]), col = int(l[1]), fillChar =  None if l[2] == "nofill" else ' ')
		else:
			m = re.match('^line([0-9]+)', op)
			if m:
				line = int(m.groups()[0])
				debugLog(f"Print at line {line} text = \"{args}\".")
				lcd.printText(args, line = line)
	return feedback

def main():
	global debug
	global quit
	global lcd
	global backlight
	global showStat
	global port
	global blink
	# Default settings.
	lcdType = None
	init = False
	gfx = None
	clear = False
	demo = None
	font = None
	softClock = False
	printParams = False
	line = 1
	col = 1
	host = None
	port = None
	freq = None
	writeDelay = None

	# Process command line arguments.
	if len(sys.argv) == 1:
		print(USAGE)
		sys.exit(0)
	# Handle commandline arguments.
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'bBc:d:f:ghil:L:pst:xz:w:v:')
	except getopt.error as err:
		print(f'ERROR: {str(err)}. Use "-h" for usage.', file = sys.stderr)
		sys.exit(1)
	for o, v in opts:
		if o == '-h':
			print(USAGE)
			sys.exit(0)
		elif o == '-g':
			gfx = True
		elif o == '-b':
			backlight = False
		elif o == '-B':
			backlight = True
		elif o == '-c':
			col = int(v)
		elif o == '-d':
			demo = v
		elif o == '-f':
			font = v
		elif o == '-i':
			init = True
		elif o == '-l':
			line = int(v)
		elif o == '-L':
			host, port = v.split(':')
			port = int(port)
		elif o == '-p':
			printParams = True
		elif o == '-s':
			showStat = True
		elif o == '-t':
			lcdType = v.lower()
		elif o == '-x':
			clear = True
		elif o == '-z':
			freq = v
		elif o == '-w':
			writeDelay = v
		elif o == '-v':
			debug = int(v)
		else:
			print('ERROR: Unknown option. Use "-h" for usage.', file = sys.stderr);
			sys.exit(2)

	# Combine all remaining arguments into a text string to be shown on the LCD.
	text = ' '.join(args)

	if lcdType is None:
		print('ERROR: Missing LCD type.', file = sys.stderr)
		sys.exit(2)
	elif lcdType == "st7920":
		subprocess.run(["gpio", "-g", "mode", "8", "alt0"])
		subprocess.run(["gpio", "-g", "mode", "10", "alt0"])
		subprocess.run(["gpio", "-g", "mode", "11", "alt0"])
		from st7920 import ST7920HSPI
		lcd = ST7920HSPI()
	elif lcdType == "hd44780":
		from hd44780 import HD44780
		lcd = HD44780()
	elif lcdType == "hd44780opi":
		from hd44780opi import HD44780OPiH616
		lcd = HD44780OPiH616()
	else:
		print('ERROR: unsupported LCD.', file = sys.stderr)
		sys.exit(3)

	if lcd is None:
		print('ERROR: Unable to initialize an LCD.', file = sys.stderr)
		sys.exit(4)

	if debug > 0:
		lcd.setDebug(debug)
	if printParams:
		lcd.printParams()
	if freq is not None:
		lcd.setFreq(None if freq == "-" else int(freq))
	if writeDelay is not None:
		lcd.setWriteDelay(None if writeDelay == "-" else int(writeDelay))
	if init:
		lcd.init()
	if backlight is not None:
		lcd.setBacklight(backlight)
	if demo:
		lcd.demo(option = demo)
		sys.exit(0)
	if gfx:
		lcd.setGfxMode()
	else:
		lcd.setTextMode()
	if font is not None:
		lcd.setGfxFont(font)
	if clear:
		lcd.clearScreen()
	if len(text):
		lcd.printText(text, line = line, col = col)
 
	if host is not None:
		# Daemon mode.
		# Keep the default SIGINT handler to use later.
		defaultSIGTERM = signal.signal(signal.SIGTERM, onSignal)
		signal.signal(signal.SIGINT, onSignal)
		print("Activating daemon mode on %s:%s" % (host, port))
		lcd.clearScreen()
		backlight = True
		lcd.setBacklight(backlight)
		lcdStat("LCDSRV started.")
		# Create new thread to keep heatbeats.
		Thread(target = heartbeat, args = ()).start()
		with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
			s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
			s.bind((host, port))
			s.listen()
			while not quit:
				lcdStat("Listening...")
				conn, addr = s.accept()
				debugLog(f'{addr} connected.')
				lcdStat(f"{addr[0]}:{addr[1]} connected")
				with conn:
					while True:
						data = conn.recv(1024)
						if not data:
							# No data? The client must have closed the connection.
							break
						msg = data.decode().strip()
						debugLog(f"Received \"{msg}\" from {addr}.")
						feedback = handleMsg(msg)
						if feedback is not None:
							try:
								debugLog(f"Sending \"{feedback.strip()}\" back to {addr}")
								conn.sendall(feedback.encode())
								# Only handle 1 command a time, so shutdown now.
								conn.shutdown(socket.SHUT_RDWR)
							except OSError:
								# Ignore connection error, since the client might have problem
								# and close the connection prematurely.
								pass
			# Quit?
			s.shutdown(socket.SHUT_RDWR)
			s.close()
			# Leave a stop message on screen.
			lcd.clearScreen()
			t = datetime.datetime.now().strftime('(%Y%m%d %H:%M)')
			s = "lcdsrv stopped"
			l = lcd.lines // 2
			if lcd.columns <= len(s):
				c = 1
			else:
				c = (lcd.columns - len(s)) // 2 + 1
			lcd.printText(s, line = l, col = c)
			lcd.printText(t, line = l + 1, col = c - 1)
			lcd.setBacklight(False)

if __name__ == '__main__':
	main()

