#!/usr/bin/env python3
import os
import sys
import getopt
import subprocess
from time import sleep

VERSION = "0.1"
PROGRAM = os.path.basename(__file__)
USAGE = f"""\
{PROGRAM} version {VERSION}.
Display text or graphic to an attached LCD.
Syntax: {PROGRAM} [OPTION] [TEXT]
OPTION:
-B      Turn backlight on.
-b      Turn backlight off.
-d op   Run a demo with option op (default "all") and ignore all other options.
-f name Use given font name (if supported).
-h      Display this help and exit.
-i      Initialize/reset LCD (effectively clear the screen).
-p      Print LCD parameters.
-t      LCD type (required). See supported types below.
-x      Clear the LCD screen.
-r      Restore GPIO settings (default is not).
-l n    Move text cursor to line n (start from 1, default 1).
-c n    Move text cursor to column n (if supported, start from 1, default 1).

Supported LCD are:
- st7920: 128x64 graphic LCD, ST7920 chip, 8 lines 21 characters, 6x8 font.
- hd44780: 16x2 character LCD, HD44780 chip, 2 lines 16 characters, 5x8 font.
- hd44780opi: it is hd44780 written for Orange Pi boards.

Supported fonts are:
- st7920: 4x6, 6x8 (default).
"""

def main():
	# Default settings.
	lcdType = None
	init = False
	backlight = None
	clear = False
	demo = None
	font = None
	softClock = False
	printParams = False
	line = 1
	col = 1
	cleanup = False
	lcd = None

	# Process command line arguments.
	if len(sys.argv) == 1:
		print(USAGE)
		sys.exit(0)
	# Handle commandline arguments.
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'bBc:d:f:hil:prst:x')
	except getopt.error as err:
		print(f'ERROR: {str(err)}. Use "-h" for usage.', file = sys.stderr)
		sys.exit(1)
	for o, v in opts:
		if o == '-h':
			print(USAGE)
			sys.exit(0)
		elif o == '-b':
			backlight = False
		elif o == '-B':
			backlight = True
		elif o == '-c':
			col = int(v)
		elif o == '-d':
			demo = v
		elif o == '-f':
			font = v
		elif o == '-i':
			init = True
		elif o == '-l':
			line = int(v)
		elif o == '-p':
			printParams = True
		elif o == '-r':
			cleanup = True
		elif o == '-s':
			softClock = True
		elif o == '-t':
			lcdType = v.lower()
		elif o == '-x':
			clear = True
		else:
			print('ERROR: Unknown option. Use "-h" for usage.', file = sys.stderr);
			sys.exit(2)

	text = ' '.join(args)

	if lcdType is None:
		print('ERROR: Missing LCD type.', file = sys.stderr)
		sys.exit(2)
	elif lcdType == "st7920":
		subprocess.run(["gpio", "-g", "mode", "8", "alt0"])
		subprocess.run(["gpio", "-g", "mode", "10", "alt0"])
		subprocess.run(["gpio", "-g", "mode", "11", "alt0"])
		from st7920 import ST7920HSPI
		lcd = ST7920HSPI()
	elif lcdType == "hd44780":
		from hd44780 import HD44780
		lcd = HD44780()
	elif lcdType == "hd44780opi":
		from hd44780opi import HD44780OPiH616
		lcd = HD44780OPiH616()
	else:
		print('ERROR: unsupported LCD.', file = sys.stderr)
		sys.exit(3)

	if lcd is None:
		print('ERROR: Unable to initialize an LCD.', file = sys.stderr)
		sys.exit(4)
	else:
		if printParams:
			lcd.printParams()
		if demo:
			lcd.demo(option = demo)
			sys.exit(0)
		if init:
			lcd.init()
			if lcdType == "st7920":
				lcd.setGraphicMode()
				lcd.clearScreen(0)
				lcd.redraw()
		if backlight is not None:
			lcd.backlight(backlight)
		if clear:
			if lcdType == "st7920":
				lcd.setGraphicMode()
				lcd.clearScreen(0)
				lcd.redraw()
			else:
				lcd.clearScreen()
		if len(text):
			if lcdType == "st7920":
				lcd.setGraphicMode()
				if font is not None:
					lcd.setGfxFont(font)
				lcd.printGfxText(text, line = line, col = col)
				lcd.redraw()
			else:
				lcd.printText(text, line = line, col = col)
		if cleanup:
			lcd.cleanup()
 
if __name__ == '__main__':
	main()

