#!/usr/bin/env python3
import os
import sys
import getopt
import RPi.GPIO as GPIO
from time import sleep

VERSION = "0.3"
PROGRAM = os.path.basename(__file__)
USAGE = f"""\
{PROGRAM} version {VERSION}.
Display text onto an 16x2 monochrome LCD screen with HD44780 controller.
Syntax: {PROGRAM} [OPTION] [LINE1] [LINE2]
OPTION:
-h			Display this help and exit.
-c			Clear the LCD.
-d			Run a demo.
-1 text Text to display on line 1.
-2 text Text to display on line 2.
"""

# Define GPIO to LCD mapping
LCD_D4 = 15
LCD_D5 = 16
LCD_D6 = 18
LCD_D7 = 22
LCD_E  = 11
LCD_RS = 13
 
# Define some device constants
LCD_WIDTH = 16		# Maximum characters per line
LCD_CHR = True
LCD_CMD = False
 
LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line
 
# Timing constants
#  E_PULSE = 0.0005
#  E_DELAY = 0.0005

def main():
	clear = False
	line1 = None
	line2 = None
	demo = False
	# Process command line arguments.
	if len(sys.argv) == 1:
		print(USAGE)
		sys.exit(0)
	# Handle commandline arguments.
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'h1:2:cd')
	except getopt.error as err:
		print(f'ERROR: {str(err)}. Use "-h" for usage.', file = sys.stderr)
		sys.exit(1)

	for o, v in opts:
		if o == '-h':
			print(USAGE)
			sys.exit(0)
		elif o == '-1':
			line1 = v
		elif o == '-2':
			line2 = v
		elif o == '-c':
			clear = True
		elif o == '-d':
			demo = True
		else:
			print('ERROR: Unrecognized option. Use "-h" for usage.', file = sys.stderr);
			sys.exit(2)

	# Assign registers.
	GPIO.setwarnings(False)
	GPIO.setmode(GPIO.BOARD)		 # Use physical pin numbers
	GPIO.setup(LCD_E, GPIO.OUT)  # E
	GPIO.setup(LCD_RS, GPIO.OUT) # RS
	GPIO.setup(LCD_D4, GPIO.OUT) # DB4
	GPIO.setup(LCD_D5, GPIO.OUT) # DB5
	GPIO.setup(LCD_D6, GPIO.OUT) # DB6
	GPIO.setup(LCD_D7, GPIO.OUT) # DB7
 
	# Initialise display
	lcd_init()

	# Execute commands.
	if clear:
		print("Clear the LCD.")
		lcd_clear()
	if line1 is not None:
		print(f"Line 1: {line1}")
		lcd_string(line1,LCD_LINE_1)
	if line2 is not None:
		print(f"Line 2: {line2}")
		lcd_string(line2,LCD_LINE_2)
	if demo:
		print("Running a demo. Ctrl-C to stop...")
		try:
			while True:
				# Send some test
				lcd_string("Electronics Hub ",LCD_LINE_1)
				lcd_string("		Presents		",LCD_LINE_2)
				sleep(3) # 3 second delay
				# Send some text
				lcd_string("Rasbperry Pi",LCD_LINE_1)
				lcd_string("16x2 LCD Test",LCD_LINE_2)
				sleep(3) # 3 second delay
				# Send some text
				lcd_string("1234567890*@$#%&",LCD_LINE_1)
				lcd_string("abcdefghijklmnop",LCD_LINE_2)
				sleep(3)
		except KeyboardInterrupt:
			pass
		finally:
			print("End of demo.")
			lcd_clear()
			
def lcd_init():
	lcd_display(0x28,LCD_CMD) # Set 4 bits, 2 lines, default font.
	lcd_display(0x0F,LCD_CMD) # Display, cursor and blinking all on.
	#  sleep(E_DELAY)
 
def lcd_clear():
	lcd_display(0x01,LCD_CMD) # Clear display

def lcd_display(bits, mode):
	# Send byte to data pins
	# bits = data
	# mode = True  for character
	#				 False for command
 
	GPIO.output(LCD_RS, mode) # RS
 
	# High bits
	GPIO.output(LCD_D4, False)
	GPIO.output(LCD_D5, False)
	GPIO.output(LCD_D6, False)
	GPIO.output(LCD_D7, False)
	if bits&0x10==0x10:
		GPIO.output(LCD_D4, True)
	if bits&0x20==0x20:
		GPIO.output(LCD_D5, True)
	if bits&0x40==0x40:
		GPIO.output(LCD_D6, True)
	if bits&0x80==0x80:
		GPIO.output(LCD_D7, True)
 
	# Toggle 'Enable' pin
	lcd_toggle_enable()
 
	# Low bits
	GPIO.output(LCD_D4, False)
	GPIO.output(LCD_D5, False)
	GPIO.output(LCD_D6, False)
	GPIO.output(LCD_D7, False)
	if bits&0x01==0x01:
		GPIO.output(LCD_D4, True)
	if bits&0x02==0x02:
		GPIO.output(LCD_D5, True)
	if bits&0x04==0x04:
		GPIO.output(LCD_D6, True)
	if bits&0x08==0x08:
		GPIO.output(LCD_D7, True)
 
	# Toggle 'Enable' pin
	lcd_toggle_enable()
 
def lcd_toggle_enable():
	# Toggle enable
	#  sleep(E_DELAY)
	GPIO.output(LCD_E, True)
	#  sleep(E_PULSE)
	GPIO.output(LCD_E, False)
	#  sleep(E_DELAY)
 
def lcd_string(message,line):
	# Send string to display
 
	message = message.ljust(LCD_WIDTH," ")
 
	lcd_display(line, LCD_CMD)
 
	for i in range(LCD_WIDTH):
		lcd_display(ord(message[i]),LCD_CHR)
 
if __name__ == '__main__':
	main()

