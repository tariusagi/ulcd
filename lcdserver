#!/bin/bash
# This is a daemon server to serve LCD display requests. It utilize ncat program 
# to listen to requests and update the LCD display accordingly.

# This script's full path name.
SCRIPT_FULLPATH=$(readlink -f $0)
# This script's absolute directory (without trailing slash).
SCRIPT_DIR="$(dirname $SCRIPT_FULLPATH)"
# This script's base name (file name only, without directory).
SCRIPT_NAME=$(basename $SCRIPT_FULLPATH)
# The log file.
LOG=~/log/$SCRIPT_NAME.log
# The mutex lock.
LOCK=~/run/$SCRIPT_NAME.lock

log() {
	if [ -n "$log" ]; then
		echo $(date +"%Y-%m-%d %H:%M:%S") $$: $* | tee -a $LOG
	else
		echo $(date +"%Y-%m-%d %H:%M:%S") $$: $*
	fi
}

if [ $# -lt 1 ]; then
	cat <<-ENDOFUSAGE
	A daemon server to serve LCD display requests.
	Syntax: $SCRIPT_NAME server <ip> <port> [log]
	Log file is $LOG if log is enabled.
	ENDOFUSAGE
	exit
fi

# Check dependencies.
DEP=ncat

# Check dependencies first.
for d in $DEP; do
	path="$(which ${d})"
	if [ -z "$path" ]; then
		>&2 echo $d command not found. Please install it first.
		exit 2
	fi
done

if [ "$1" == "server" ]; then
	# Server mode.
	if [ $# -lt 3 ]; then
		>&2 echo ERROR: need IP and host to bind to.
		exit 3
	fi
	ip=$2
	port=$3
	[ "$4" == "log" ] && log=$4
	# Prepare the directories.
	test -d ~/run || mkdir ~/run
	test -n "$log" && { test -d ~/log || mkdir ~/log; }
	# Clear the LCD fist.
	lcd -c > /dev/null
	# Use ncat to listen to network connections and let it call this script back 
	# in worker mode.
	log Start listening at $ip:$port with worker at $SCRIPT_FULLPATH
	ncat -k -l $ip $port -e "$SCRIPT_FULLPATH worker $log"
	ret=$?
	log Server terminated with code $ret
	exit $ret
elif [ "$1" == "worker" ]; then
	# Worker mode.
	set -e
	[ "$2" == "log" ] && log=$2
	shopt -s nocasematch
	line1=""
	line2=""
	# Use flock to create a mutext to avoid messing LCD updates.
	exec {fd}>$LOCK
	log Acquiring LOCK
	flock $fd
	log Lock acquired
	# Read and process stdin line by line.
	while IFS= read -r line; do
		cmd=${line%% *}
		case $cmd in
			clear)
				log Clear screen
				lcd -c > /dev/null
				;;
			line1)
				text=${line#$cmd }
				log Line 1 = \"$text\"
				lcd -1 "$text" > /dev/null
				;;
			line2)
				text=${line#$cmd }
				log Line 2 = \"$text\"
				lcd -2 "$text" > /dev/null
				;;
			*)
				log $line
				;;
		esac
	done
	log EOF
fi

