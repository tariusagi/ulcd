#!/bin/bash
# This is a daemon server to serve LCD display requests. It utilize ncat program 
# to listen to requests and update the LCD display accordingly.

# This script's full path name.
SCRIPT_FULLPATH=$(readlink -f $0)
# This script's absolute directory (without trailing slash).
SCRIPT_DIR="$(dirname $SCRIPT_FULLPATH)"
# This script's base name (file name only, without directory).
SCRIPT_NAME=$(basename $SCRIPT_FULLPATH)
# The log file.
LOG=~/log/$SCRIPT_NAME.log
# The mutex lock.
LOCK=~/run/$SCRIPT_NAME.lock

print_usage() {
	cat <<-ENDOFUSAGE
	A daemon server to serve LCD display requests.
	Syntax: $SCRIPT_NAME -h -l file <-t type> <ip> <port>
	where:
	-h      Print this usage.
	-l      Log to the given file.
	-t type Set the LCD type for "lcd" command. Run "lcd -h" for help.
	-f font Set the font for the LCD (depends on the LCD type).
	ENDOFUSAGE
}

log() {
	if [ -n "$log" ]; then
		echo $(date +"%Y-%m-%d %H:%M:%S") $$: $* | tee -a $log
	else
		echo $(date +"%Y-%m-%d %H:%M:%S") $$: $*
	fi
}

on_exit() {
	# Reset the LCD and turn off the backlight.
	log Reset and turn off the LCD on exit.
	lcd -t $lcd_type -i -x -b > /dev/null
}

# Check the number of given command line arguments.
if [[ $# -eq 0 ]]; then
	# No argument? Print a reminder.
	echo Nothing to do. Run with \"-h\" for usage.
	exit
fi

# Now handle command line arguments based on predefined list. Refer to "getopts"
# document to understand this code.
while getopts "f:hl:t:w" opt; do
	case ${opt} in
	f) font="-f $OPTARG"; echo Will use font $font ;;
	l) log=$OPTARG ;;
	h) print_usage; exit ;;
	t) lcd_type=$OPTARG ;;
	w) worker=yes ;;
	\?)
		echo "Invalid option \"$OPTARG\""
		exit 1
		;;
	:)
		echo "Option \"$OPTARG\" requires an argument."
		exit 1
		;;
	esac
done

if [ -z "$lcd_type" ]; then
	>&2 echo Missing LCD type. Use \"-h\" for usage.
	exit 1
fi

# Remove processed arguments.
shift $((OPTIND-1))

if [ -z "$worker" ]; then
	# Server mode.
	if [ $# -lt 1 ]; then
		>&2 echo Server IP missing. Use \"-h\" for usage.
		exit 1
	elif [ $# -lt 2 ]; then
		>&2 echo Server port missing. use \"-h\" for usage.
		exit 1
	fi

	ip=$1
	port=$2

	# Check dependencies.
	DEP="ncat lcd"

	# Check dependencies first.
	for d in $DEP; do
		path="$(which ${d})"
		if [ -z "$path" ]; then
			>&2 echo $d command not found. Please install it first.
			exit 2
		fi
	done

	# Prepare the directories.
	test -d ~/run || mkdir ~/run
	# test -n "$log" && { test -d ~/log || mkdir ~/log; }
	# Initialize the LCD.
	lcd -t $lcd_type -i -x -B $font "LCDSERVER..." > /dev/null
	# Handle SIGTERM.
	trap "on_exit" TERM INT
	# Use ncat to listen to network connections and let it call this script back 
	# in worker mode.
	log Listening at $ip:$port, LCD $lcd_type, worker at $SCRIPT_FULLPATH
	if [ -z "$log" ]; then
		ncat -k -l $ip $port -e "$SCRIPT_FULLPATH -w -t $lcd_type $font"
	else
		ncat -k -l $ip $port -e "$SCRIPT_FULLPATH -w -t $lcd_type $font -l $log"
	fi
	ret=$?
	log Server terminated with code $ret
	exit $ret
else
	# Worker mode.
	set -e
	shopt -s nocasematch
	line1=""
	line2=""
	# Use flock to create a mutext to avoid messing LCD updates.
	exec {fd}>$LOCK
	log Acquiring LOCK
	flock $fd
	log Lock acquired
	# Read and process stdin line by line.
	while IFS= read -r line; do
		cmd=${line%% *}
		case $cmd in
			clear)
				log Clear screen
				lcd -t $lcd_type -x > /dev/null
				;;
			line*)
				text=${line#$cmd }
				line=${cmd:4}
				log Line $line = \"$text\"
				lcd -t $lcd_type $font -l $line "$text"
				;;
			*)
				log $line
				;;
		esac
	done
	log EOF
fi

